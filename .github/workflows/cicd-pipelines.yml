name: OTS - Control Api Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Variables
env:
  AZURE_FUNCTIONAPP_NAME: 'otsapptestcicd'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  NODE_VERSION: '18.x'                      # set this to the node version to use (e.g. '8.x', '10.x', '12.x')

# Define jobs for each stage
jobs:
  # Build the project
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          npm ci
          npm run build --if-present
          popd

  # Run unit tests
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      # - name: Linting
      #   run: npm run lint

      - name: Unit tests
        run: npm run test

      # - name: Code coverage
      #   run: npm run test:cov

      - name: Clean build
        run: npm run build --if-present

  # Analyze
  # analyze:
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js ${{ env.NODE_VERSION }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  #     - name: Analyze with SonarQube
  #       uses: sonarsource/sonarqube-scan-action@v1
  #       with:
  #         sonar-token: ${{ secrets.SONAR_TOKEN }}
  #         sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
  #         sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
  #         sonar-organization: ${{ secrets.SONAR_ORGANIZATION }}

  #     - name: Run Tenable Nessus scan
  #       env:
  #         NESSUS_URL: https://your-nessus-server.com
  #         NESSUS_ACCESS_KEY: ${{ secrets.NESSUS_ACCESS_KEY }}
  #         NESSUS_SECRET_KEY: ${{ secrets.NESSUS_SECRET_KEY }}
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y curl
  #         curl -sSL https://raw.githubusercontent.com/tenable/nessus-cloud-sdk-python/master/scripts/get-nessuscli.py | sudo python
  #         sudo nessuscli --version
  #         sudo nessuscli policy list
  #         sudo nessuscli scan new --policy "Your Nessus Policy Name" --target "your.target.com"

  # Publish artifacts to Azure Functions
  publish:  
    runs-on: ubuntu-latest
    needs: [test]
    environment: dev
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 'Resolve Project Dependencies Using Npm'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          npm ci
          npm run build --if-present
          popd

      # - name: 'Run Azure Functions Action'
      #   uses: Azure/functions-action@v1
      #   id: fa
      #   with:
      #     app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
      #     package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
      #     publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_DEV }} # Remove publish-profile to use Azure RBAC

  cypress:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v5